// Validating benchmarks:
// ***** BenchmarkRunner: Start   *****
// ***** Found 2 benchmark(s) in total *****
// ***** Building 1 exe(s) in Parallel: Start   *****
// ***** Done, took 00:00:00 (0.07 sec)   *****
// Found 2 benchmarks:
//   SeriBench.SerializeStride: MediumRun(Toolchain=InProcessNoEmitToolchain, IterationCount=15, LaunchCount=2, WarmupCount=10)
//   SeriBench.SerializeMemPack: MediumRun(Toolchain=InProcessNoEmitToolchain, IterationCount=15, LaunchCount=2, WarmupCount=10)

Setup power plan (GUID: 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c FriendlyName: Performances élevées)
// **************************
// Benchmark: SeriBench.SerializeStride: MediumRun(Toolchain=InProcessNoEmitToolchain, IterationCount=15, LaunchCount=2, WarmupCount=10)
// *** Execute ***
// Launch: 1 / 2

// Benchmark Process Environment Information:
// Runtime=.NET 7.0.0 (7.0.22.51805), X64 RyuJIT AVX2
// GC=Concurrent Workstation
// HardwareIntrinsics=AVX2,AES,BMI1,BMI2,FMA,LZCNT,PCLMUL,POPCNT VectorSize=256
// Job: MediumRun(Toolchain=InProcessNoEmitToolchain, IterationCount=15, LaunchCount=2, WarmupCount=10)

OverheadJitting  1: 1 op, 147900.00 ns, 147.9000 us/op
WorkloadJitting  1: 1 op, 757900.00 ns, 757.9000 us/op

OverheadJitting  2: 16 op, 212100.00 ns, 13.2562 us/op
WorkloadJitting  2: 16 op, 56500.00 ns, 3.5312 us/op

WorkloadPilot    1: 16 op, 57100.00 ns, 3.5688 us/op
WorkloadPilot    2: 32 op, 60900.00 ns, 1.9031 us/op
WorkloadPilot    3: 64 op, 28000.00 ns, 437.5000 ns/op
WorkloadPilot    4: 128 op, 53500.00 ns, 417.9688 ns/op
WorkloadPilot    5: 256 op, 46200.00 ns, 180.4688 ns/op
WorkloadPilot    6: 512 op, 164800.00 ns, 321.8750 ns/op
WorkloadPilot    7: 1024 op, 184800.00 ns, 180.4688 ns/op
WorkloadPilot    8: 2048 op, 439000.00 ns, 214.3555 ns/op
WorkloadPilot    9: 4096 op, 675000.00 ns, 164.7949 ns/op
WorkloadPilot   10: 8192 op, 2478100.00 ns, 302.5024 ns/op
WorkloadPilot   11: 16384 op, 2640300.00 ns, 161.1511 ns/op
WorkloadPilot   12: 32768 op, 8261100.00 ns, 252.1088 ns/op
WorkloadPilot   13: 65536 op, 17592700.00 ns, 268.4433 ns/op
WorkloadPilot   14: 131072 op, 24587900.00 ns, 187.5908 ns/op
WorkloadPilot   15: 262144 op, 43235300.00 ns, 164.9296 ns/op
WorkloadPilot   16: 524288 op, 95747800.00 ns, 182.6244 ns/op
WorkloadPilot   17: 1048576 op, 91334700.00 ns, 87.1036 ns/op
WorkloadPilot   18: 2097152 op, 181735300.00 ns, 86.6581 ns/op
WorkloadPilot   19: 4194304 op, 340114100.00 ns, 81.0895 ns/op
WorkloadPilot   20: 8388608 op, 637960500.00 ns, 76.0508 ns/op

OverheadWarmup   1: 8388608 op, 40120600.00 ns, 4.7827 ns/op
OverheadWarmup   2: 8388608 op, 38496000.00 ns, 4.5891 ns/op
OverheadWarmup   3: 8388608 op, 40499000.00 ns, 4.8279 ns/op
OverheadWarmup   4: 8388608 op, 40566300.00 ns, 4.8359 ns/op
OverheadWarmup   5: 8388608 op, 40204400.00 ns, 4.7927 ns/op
OverheadWarmup   6: 8388608 op, 41113900.00 ns, 4.9012 ns/op
OverheadWarmup   7: 8388608 op, 41389700.00 ns, 4.9340 ns/op
OverheadWarmup   8: 8388608 op, 33102400.00 ns, 3.9461 ns/op

OverheadActual   1: 8388608 op, 32225400.00 ns, 3.8416 ns/op
OverheadActual   2: 8388608 op, 32946000.00 ns, 3.9275 ns/op
OverheadActual   3: 8388608 op, 31951400.00 ns, 3.8089 ns/op
OverheadActual   4: 8388608 op, 32064500.00 ns, 3.8224 ns/op
OverheadActual   5: 8388608 op, 32491000.00 ns, 3.8732 ns/op
OverheadActual   6: 8388608 op, 34740800.00 ns, 4.1414 ns/op
OverheadActual   7: 8388608 op, 36800900.00 ns, 4.3870 ns/op
OverheadActual   8: 8388608 op, 32303800.00 ns, 3.8509 ns/op
OverheadActual   9: 8388608 op, 33042500.00 ns, 3.9390 ns/op
OverheadActual  10: 8388608 op, 33118100.00 ns, 3.9480 ns/op
OverheadActual  11: 8388608 op, 32318300.00 ns, 3.8526 ns/op
OverheadActual  12: 8388608 op, 34173700.00 ns, 4.0738 ns/op
OverheadActual  13: 8388608 op, 33616300.00 ns, 4.0074 ns/op
OverheadActual  14: 8388608 op, 33486600.00 ns, 3.9919 ns/op
OverheadActual  15: 8388608 op, 34988300.00 ns, 4.1709 ns/op

WorkloadWarmup   1: 8388608 op, 900877800.00 ns, 107.3930 ns/op
WorkloadWarmup   2: 8388608 op, 815957600.00 ns, 97.2697 ns/op
WorkloadWarmup   3: 8388608 op, 1638062600.00 ns, 195.2723 ns/op
WorkloadWarmup   4: 8388608 op, 732916900.00 ns, 87.3705 ns/op
WorkloadWarmup   5: 8388608 op, 607392700.00 ns, 72.4069 ns/op
WorkloadWarmup   6: 8388608 op, 578718100.00 ns, 68.9886 ns/op
WorkloadWarmup   7: 8388608 op, 563629300.00 ns, 67.1898 ns/op
WorkloadWarmup   8: 8388608 op, 2826775400.00 ns, 336.9779 ns/op
WorkloadWarmup   9: 8388608 op, 832674200.00 ns, 99.2625 ns/op
WorkloadWarmup  10: 8388608 op, 616670300.00 ns, 73.5128 ns/op

WorkloadActual   1: 8388608 op, 592794600.00 ns, 70.6666 ns/op
WorkloadActual   2: 8388608 op, 691252700.00 ns, 82.4037 ns/op
WorkloadActual   3: 8388608 op, 582331500.00 ns, 69.4193 ns/op
WorkloadActual   4: 8388608 op, 616258500.00 ns, 73.4637 ns/op
WorkloadActual   5: 8388608 op, 634353900.00 ns, 75.6209 ns/op
WorkloadActual   6: 8388608 op, 685616800.00 ns, 81.7319 ns/op
WorkloadActual   7: 8388608 op, 579051500.00 ns, 69.0283 ns/op

OutOfMemoryException!
BenchmarkDotNet continues to run additional iterations until desired accuracy level is achieved. It's possible only if the benchmark method doesn't have any side-effects.
If your benchmark allocates memory and keeps it alive, you are creating a memory leak.
You should redesign your benchmark and remove the side-effects. You can use `OperationsPerInvoke`, `IterationSetup` and `IterationCleanup` to do that.

System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation.
 ---> System.OutOfMemoryException: Array dimensions exceeded supported range.
   at System.IO.MemoryStream.set_Capacity(Int32 value)
   at System.IO.MemoryStream.EnsureCapacity(Int32 value)
   at System.IO.MemoryStream.Write(ReadOnlySpan`1 buffer)
   at System.IO.BinaryWriter.Write(String value)
   at Bench.Serialization.PersonSerializer.Serialize(Person& obj, ArchiveMode mode, SerializationStream stream) in C:\Users\youness_kafia\Documents\dotnetProjs\Benchmarks.Serialization\Bench.cs:line 55
   at BenchmarkDotNet.Toolchains.InProcess.NoEmit.BenchmarkActionFactory.BenchmarkActionVoid.InvokeMultipleHardcoded(Int64 repeatCount)
   at BenchmarkDotNet.Engines.Engine.RunIteration(IterationData data)
   at BenchmarkDotNet.Engines.EngineStage.RunIteration(IterationMode mode, IterationStage stage, Int32 index, Int64 invokeCount, Int32 unrollFactor)
   at BenchmarkDotNet.Engines.EngineActualStage.RunSpecific(Int64 invokeCount, IterationMode iterationMode, Int32 iterationCount, Int32 unrollFactor)
   at BenchmarkDotNet.Engines.EngineActualStage.Run(Int64 invokeCount, IterationMode iterationMode, Boolean runAuto, Int32 unrollFactor, Boolean forceSpecific)
   at BenchmarkDotNet.Engines.EngineActualStage.RunWorkload(Int64 invokeCount, Int32 unrollFactor, Boolean forceSpecific)
   at BenchmarkDotNet.Engines.Engine.Run()
   at BenchmarkDotNet.Toolchains.InProcess.NoEmit.InProcessNoEmitRunner.Runnable.RunCore(IHost host, BenchmarkCase benchmarkCase)
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
   at System.Reflection.MethodInvoker.Invoke(Object obj, IntPtr* args, BindingFlags invokeAttr)
   --- End of inner exception stack trace ---
   at System.Reflection.MethodInvoker.Invoke(Object obj, IntPtr* args, BindingFlags invokeAttr)
   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
   at System.Reflection.MethodBase.Invoke(Object obj, Object[] parameters)
   at BenchmarkDotNet.Toolchains.InProcess.NoEmit.InProcessNoEmitRunner.Run(IHost host, BenchmarkCase benchmarkCase)
Successfully reverted power plan (GUID: 381b4222-f694-41f0-9685-ff5bb260df2e FriendlyName: Utilisation normale)
// * Artifacts cleanup *
